<?php
    defined('BASEPATH') OR exit('No direct script access allowed');
    // This can be removed if you use __autoload() in config.php OR use Modular Extensions
    require APPPATH . '/libraries/REST_Controller.php';
    /**
    * This is an example of a few basic user interaction methods you could use
    * all done with a hardcoded array
    *
    * @package         CodeIgniter
    * @subpackage      Rest Server
    * @category        Controller
    * @author          Phil Sturgeon, Chris Kacerguis
    * @license         MIT
    * @link            https://github.com/chriskacerguis/codeigniter-restserver
    */
    class UserController extends REST_Controller {
        function __construct()
        {
            // Construct the parent class
            parent::__construct();
            // Configure limits on our controller methods
            // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
            $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
            $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
            $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key  

            $this->load->library('form_validation');
            $this->load->model('UserModel');
            $this->lang->load('user');
        } 

        private function validate() {
            $this->messages = array();
            $valid = true;

            if(!$this->form_validation->required($this->post("mobile_no"))) {
                $this->messages[] = $this->lang->line("mobile_no_required");  
                $valid = false;
            }

            if(!$this->form_validation->required($this->post("first_name"))) {
                $this->messages[] = $this->lang->line("first_name_required");
                $valid = false;
            }

            if(!$this->form_validation->required($this->post("last_name"))) {
                $this->messages[] = $this->lang->line("last_name_required");  
                $valid = false;
            }

            if(!$this->form_validation->required($this->post("password"))) {
                $this->messages[] = $this->lang->line("password_required");  
                $valid = false;
            }

            if($this->post("email") && !$this->form_validation->valid_email($this->post("email"))) {
                $this->messages[] = $this->lang->line("email_invalid");  
                $valid = false;
            }

            return $valid;
        }

        public function index_get($id=null)
        {
            if ($id === NULL)
            {
                $users = $this->UserModel->find(null);
                $this->response($users, REST_Controller::HTTP_OK);
            } else {
                $id = (int) $id;
                if ($id <= 0)
                {
                    $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
                }
                $user = $this->UserModel->findById($id);

                if(!$user) {
                    $this->response($this->lang->line('user_not_found'), REST_Controller::HTTP_NOT_FOUND); // BAD_REQUEST (400) being the HTTP response code
                }
                $this->response($user, REST_Controller::HTTP_OK);
            }

        }


        public function index_post()
        {
            // $this->some_model->update_user( ... );

            try {
                if(!$this->validate()) {
                    throw new Exception(implode(",", $this->messages), REST_Controller::HTTP_BAD_REQUEST);
                }

                // Check duplicate
                if($this->post('email')) {
                    $users = $this->UserModel->find(array("email"=>$this->post('email')));
                    if(count($users)) throw new Exception($this->lang->line('email_duplicated'));
                }


                $users = $this->UserModel->find(array("mobile_no"=>$this->post('mobile_no')));
                if(count($users)) throw new Exception($this->lang->line('mobile_no_duplicated'));

                $id = $this->UserModel->create($this->post());

                $user = $this->UserModel->findById($id);

                $this->response($user, REST_Controller::HTTP_CREATED);

            } catch(Exception $e) {                   
                $this->response($e->getMessage(), $e->getCode());
            }                 
        }


        public function index_put($id=null)
        {
            if($id == null)
                $this->response("id required. (i.e. api/users/1)", REST_Controller::HTTP_BAD_REQUEST);
            // $this->some_model->update_user( ... );
            $message = [
                'id' => 100, // Automatically generated by the model
                'name' => $this->post('name'),
                'email' => $this->post('email'),
                'message' => 'Added a resource'
            ];
            $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
        }
        public function index_delete($id=null)
        {
            if($id == null)
                $this->response("id required. (i.e. api/users/1)", REST_Controller::HTTP_BAD_REQUEST);

            $id = (int) $this->get('id');
            // Validate the id.
            if ($id <= 0)
            {
                // Set the response and exit
                $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
            }
            // $this->some_model->delete_something($id);
            $message = [
                'id' => $id,
                'message' => 'Deleted the resource'
            ];
            $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
        }
}